paths:
  /api/products/:
    get:
      summary: Get a list of products
      tags:
        - Products
      parameters:
      - name: limit
        in: query
        description: Maximum number of products to return per page.
        schema:
          type: integer
      - name: sort
        in: query
        description: Product sort order (ascending or descending).
        schema:
          type: string
          enum: ['asc', 'desc']
      - name: page
        in: query
        description: Page number for pagination.
        schema:
          type: integer
      - name: query
        in: query
        description: Search term to filter products by category or status, accepted values; categoryName, true or false
        schema:
          type: string
      responses:
        "200":
          description: Products were fetched successfully
          content:
            application/json:
              schema: 
                type: array
                items: 
                  $ref: '#/components/schemas/Product'
        "500":
          description: Internal server error, usually generated by a faulty query
    post:
      summary: Create a new product (you need to be an administrator or premium user)
      tags:
        - Products
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/requestBodies/ProductObject'
      responses:
        "201":
          description: The product was created successfully
        "500":
          description: Internal server error
  /api/products/{pid}:
    get:
      summary: Get a product by id
      tags:
        - Products
      parameters:
      - name: pid
        in: path
        required: true
        description: Product id to get
        schema: 
          type: string
      responses:
        "200":
          description: Product was fetched successfully
        "500":
          description: Internal server error
    put:
      summary: Update a product by id
      tags:
        - Products
      parameters:
      - name: pid
        in: path
        required: true
        description: Product id to update
        schema: 
          type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/requestBodies/ProductObject'
      responses:
        "200":
          description: Product was updated successfully
        "500":
          description: Internal server error
    delete:
      summary: Delete a product by id
      tags:
        - Products
      parameters:
      - name: pid
        in: path
        required: true
        description: Product id to delete
        schema: 
          type: string
      responses:
        "200":
          description: Product was deleted successfully
        "500":
          description: Internal server error

components:
  schemas:
    Product:
      type: Object
      properties:
        _id:
          type: string
          description: Id autogenerated by MongoDB
        title:
          type: string
          description: Product name
        description:
          type: string
          description: Product description
        thumbnails:
          type: array
          items:
            type: string
          description: Image links
        category:
          type: string
          description: Proudct category
        price:
          type: number
          description: Product price
        stock:
          type: integer
          description: Product stock
        status:
          type: boolean
          description: Product status, if is it false is an inactive product
        code:
          type: string
          description: Product code
        owner:
          type: string
          description: Product owner, it can be 'admin' or a user email
      example:
        _id: ObjectId('64611d8c7f614f9cd4ae73b2')
        title: Dell
        description: Dell description.
        thumbnails: []
        category: electronics
        price: 35
        stock: 65
        status: true 
        code: 2346NOP
        owner: admin
  requestBodies:
    ProductObject:
      type: object
      properties:
        title:
          type: string
          description: Product name
        description:
          type: string
          description: Product description
        thumbnails:
          type: array
          items:
            type: string
          description: Image links
        category:
          type: string
          description: Proudct category
        price:
          type: number
          description: Product price
        stock:
          type: integer
          description: Product stock
        status:
          type: boolean
          description: Product status, if is it false is an inactive product
        code:
          type: string
          description: Product code
        owner:
          type: string
          description: Product owner, it can be 'admin' or a user email
      example:
        title: Mac M2
        description: Mac description.
        thumbnails: []
        category: electronics
        price: 35
        stock: 65
        status: true 
        code: 2346NOP
        owner: admin